<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-03-09T16:45:47+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">David Dong’s Blog</title><subtitle>This is David Dong&apos;s blog. It&apos;s about program and design, life and sharing. Let&apos;s explore more together. | David，Software，Developer.Designer | 关于程序与设计 - 生活与分享 | 这里是董刚 的个人博客，让我们一起探索更多。</subtitle><author><name>David Dong</name></author><entry><title type="html">Rust startup - trait</title><link href="http://localhost:4000/rust/2024/02/15/Rust-startup-trait.html" rel="alternate" type="text/html" title="Rust startup - trait" /><published>2024-02-15T11:22:40+08:00</published><updated>2024-02-15T11:22:40+08:00</updated><id>http://localhost:4000/rust/2024/02/15/Rust-startup-trait</id><content type="html" xml:base="http://localhost:4000/rust/2024/02/15/Rust-startup-trait.html"><![CDATA[<p>Is Rust an object-oriented programming language? I have searched for the answer to this question on different AI assistants. <!--more--></p>

<p>Below are the answers. Let’s see.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">CHATGPT 3.5</code></p>

  <p>While Rust supports some object-oriented programming (OOP) concepts, it is not strictly
classified as an object-oriented programming language. Rust is more commonly categorized
as a multi-paradigm programming language, combining features from OOP, functional programming, 
and other paradigms.</p>
</blockquote>

<p>And</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Copilot</code></p>

  <ul>
    <li>
      <p>Rust is <strong>not</strong> strictly an object-oriented programming language.</p>
    </li>
    <li>
      <p>However, it shares some features with OOP, making it a fascinating blend of paradigms.</p>
    </li>
  </ul>
</blockquote>

<p>And</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Gemini</code></p>

  <p>The question of whether Rust is an object-oriented programming language (OOP) has a nuanced answer. While it <strong>shares some features with OOP languages, it ultimately has a different paradigm.</strong>
So, is Rust OOP?</p>

  <ul>
    <li>
      <p><strong>From a strict definition:</strong> Technically no, Rust’s core design philosophy differs from traditional OOP.</p>
    </li>
    <li>
      <p><strong>In practice:</strong> It borrows certain OOP concepts and tools, offering a familiar feel for OOP programmers.</p>
    </li>
    <li>
      <p><strong>More accurately:</strong> Rust uses a multi-paradigm approach, incorporating elements of OOP, functional programming, and others.</p>
    </li>
  </ul>
</blockquote>

<p>So the next question is how the Rust achieves polymorphism. The answer is using <strong>traits</strong>.</p>

<p>In Rust, we can define data structures using structs and enums, and achieve polymorphism using <strong>traits</strong> and trait objects, which share some similarities with classes and interfaces in OOP. However, Rust <strong>does not have</strong> classes or inheritance as found in traditional OOP languages. Instead, Rust emphasizes ownership, lifetimes, and abstraction through traits and generics.</p>

<p>Below is an example of how to use traits.</p>

<p>trait allows developers to define shared behavior that can be implemented by different types. They serve as a way to express interfaces or contracts that types must adhere to.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">trait</span> <span class="n">Animal</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">speak</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">Dog</span> <span class="p">{</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="n">age</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">Animal</span> <span class="k">for</span> <span class="n">Dog</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">speak</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"Woof!"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">Cat</span> <span class="p">{</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="n">age</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">Animal</span> <span class="k">for</span> <span class="n">Cat</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">speak</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"Meow!"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">do_speak</span><span class="p">(</span><span class="n">animal</span> <span class="p">:</span> <span class="o">&amp;</span><span class="k">dyn</span> <span class="n">Animal</span><span class="p">){</span>
    <span class="n">animal</span><span class="nf">.speak</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>

    <span class="k">let</span> <span class="n">dog</span> <span class="o">=</span> <span class="n">Dog</span> <span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"kaka"</span><span class="p">),</span> <span class="n">age</span><span class="p">:</span> <span class="mi">10</span><span class="p">};</span>
    <span class="k">let</span> <span class="n">cat</span> <span class="o">=</span> <span class="n">Cat</span> <span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"haha"</span><span class="p">),</span> <span class="n">age</span><span class="p">:</span><span class="mi">5</span><span class="p">};</span>

    <span class="nd">println!</span><span class="p">(</span><span class="s">"{} is {} years old"</span><span class="p">,</span> <span class="n">dog</span><span class="py">.name</span><span class="p">,</span> <span class="n">dog</span><span class="py">.age</span><span class="p">);</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{} is {} years old"</span><span class="p">,</span> <span class="n">cat</span><span class="py">.name</span><span class="p">,</span> <span class="n">cat</span><span class="py">.age</span><span class="p">);</span>

    <span class="n">dog</span><span class="nf">.speak</span><span class="p">();</span>
    <span class="n">cat</span><span class="nf">.speak</span><span class="p">();</span>

    <span class="nf">do_speak</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dog</span><span class="p">);</span>
    <span class="nf">do_speak</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cat</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Output</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kaka</span> <span class="n">is</span> <span class="mi">10</span> <span class="n">years</span> <span class="n">old</span>
<span class="n">haha</span> <span class="n">is</span> <span class="mi">5</span> <span class="n">years</span> <span class="n">old</span>
<span class="n">Woof</span><span class="o">!</span>
<span class="n">Meow</span><span class="o">!</span>
<span class="n">Woof</span><span class="o">!</span>
<span class="n">Meow</span><span class="o">!</span>
</code></pre></div></div>]]></content><author><name>david.dong</name></author><category term="Rust" /><category term="Rust" /><summary type="html"><![CDATA[Is Rust an object-oriented programming language?]]></summary></entry><entry><title type="html">Rust startup - Ownership</title><link href="http://localhost:4000/rust/2024/02/14/Rust-startup-ownership.html" rel="alternate" type="text/html" title="Rust startup - Ownership" /><published>2024-02-14T11:20:15+08:00</published><updated>2024-02-14T11:20:15+08:00</updated><id>http://localhost:4000/rust/2024/02/14/Rust-startup-ownership</id><content type="html" xml:base="http://localhost:4000/rust/2024/02/14/Rust-startup-ownership.html"><![CDATA[<p>Ownership in Rust refers to a set of rules that govern how memory is managed. At any given time, each value in Rust has a variable that is known as its owner. There can be only one owner at a time. When the owner goes out of scope, the value is dropped and its memory is deallocated.   <!--more--></p>

<p>Ownership ensures that memory is used safely and efficiently, and it prevents common memory errors such as dangling pointers and memory leaks.</p>

<h3 id="the-ownership-rules">The Ownership Rules</h3>

<p>The ownership rules in Rust are as follows:</p>

<ul>
  <li>
    <p><strong>Every value in Rust has an owner.</strong> The owner is the variable or expression that is last assigned to the value.</p>
  </li>
  <li>
    <p><strong>There can only be one owner of a value at a time.</strong> When a value is assigned to a new variable, the ownership of the value is transferred to the new variable.</p>
  </li>
  <li>
    <p><strong>When a value goes out of scope, the value is dropped.</strong> The value is deallocated and its memory is returned to the system.</p>
  </li>
</ul>

<h3 id="the-benefits-of-ownership">The Benefits of Ownership</h3>

<p>Ownership provides several benefits for Rust programs, including:</p>

<ul>
  <li>
    <p><strong>Memory safety:</strong> Ownership prevents common memory errors such as dangling pointers and memory leaks.</p>
  </li>
  <li>
    <p><strong>Efficiency:</strong> Ownership allows Rust to optimize memory usage by deallocating memory as soon as it is no longer needed.</p>
  </li>
  <li>
    <p><strong>Expressiveness:</strong> Ownership can be used to express the lifetime of data in Rust programs.</p>
  </li>
</ul>

<h3 id="ownership-and-borrowing">Ownership and Borrowing</h3>

<p>In some cases, it is necessary to allow multiple parts of a program to access the same data. This can be done using borrowing. Borrowing is a way to temporarily transfer ownership of a value to another variable or expression. References (&amp;) are used to borrow values, and they have a limited lifetime during which they are valid.</p>

<h3 id="mutable-borrowing">Mutable Borrowing</h3>

<p>Mutable references (&amp;mut) allow you to borrow a value for both reading and writing.
Only one mutable reference is allowed at a time in a given scope to prevent data races.</p>

<h3 id="clone">Clone</h3>

<p>To create a new value with the same data without transferring ownership, you can explicitly clone the value. Cloning allocates new memory for the data, allowing multiple variables to own separate copies of the same data.</p>

<h3 id="ownership-in-functions">Ownership in Functions</h3>

<p>Function parameters by default take ownership of the passed values.
To borrow a value within a function without taking ownership, you can pass references as function arguments.</p>

<h3 id="the-ownership-checker">The Ownership Checker</h3>

<p>The Rust compiler includes an ownership checker that helps to ensure that the ownership rules are followed. The ownership checker can detect and report errors such as dangling pointers and memory leaks.</p>

<h3 id="lifetimes">Lifetimes</h3>

<p>Lifetimes are annotations that specify the scope for which references are valid.
They are used by the Rust compiler to enforce memory safety rules and prevent dangling references.</p>

<p>Ownership in Rust provides a powerful mechanism for memory management and ensures memory safety without the need for a garbage collector or manual memory management. It enables safe and efficient concurrency and system-level programming in Rust.</p>

<h3 id="example">Example</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Car</span> <span class="p">{</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="n">price</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span>
<span class="p">}</span>
<span class="k">fn</span> <span class="nf">print_car</span><span class="p">(</span><span class="n">car</span><span class="p">:</span> <span class="n">Car</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Name {}, price {}"</span><span class="p">,</span> <span class="n">car</span><span class="py">.name</span><span class="p">,</span> <span class="n">car</span><span class="py">.price</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>

    <span class="k">let</span> <span class="n">demo_car</span> <span class="o">=</span> <span class="n">Car</span> <span class="p">{</span>
        <span class="n">name</span><span class="p">:</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"Ferrari"</span><span class="p">),</span>
        <span class="n">price</span><span class="p">:</span> <span class="mi">10000</span><span class="p">,</span>
    <span class="p">};</span>

    <span class="nf">print_car</span><span class="p">(</span><span class="n">demo_car</span><span class="p">);</span>
    <span class="c1">//println!("Name {}, price {}", demo_car.name, demo_car.price);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Output</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">~</span> <span class="n">cargo</span> <span class="n">run</span>
   <span class="n">Compiling</span> <span class="n">greeting</span> <span class="n">v0</span><span class="p">.</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span> <span class="p">(</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">david</span><span class="o">/</span><span class="n">code</span><span class="o">/</span><span class="n">rust</span><span class="o">/</span><span class="n">first_proj</span><span class="o">/</span><span class="n">greeting</span><span class="p">)</span>
    <span class="n">Finished</span> <span class="n">dev</span> <span class="p">[</span><span class="n">unoptimized</span> <span class="o">+</span> <span class="n">debuginfo</span><span class="p">]</span> <span class="n">target</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="n">in</span> <span class="mi">0</span><span class="p">.</span><span class="mi">48</span><span class="n">s</span>
     <span class="n">Running</span> <span class="err">`</span><span class="n">target</span><span class="o">/</span><span class="n">debug</span><span class="o">/</span><span class="n">greeting</span><span class="err">`</span>
<span class="n">Name</span> <span class="n">Ferrari</span><span class="p">,</span> <span class="n">price</span> <span class="mi">10000</span>
</code></pre></div></div>

<p>so the ownership of the <code class="language-plaintext highlighter-rouge">demo_car</code> has been transferred to function <code class="language-plaintext highlighter-rouge">pirnt_car</code>, try to use the <code class="language-plaintext highlighter-rouge">demo_car</code> after being transferred.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Car</span> <span class="p">{</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="n">price</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span>
<span class="p">}</span>
<span class="k">fn</span> <span class="nf">print_car</span><span class="p">(</span><span class="n">car</span><span class="p">:</span> <span class="n">Car</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Name {}, price {}"</span><span class="p">,</span> <span class="n">car</span><span class="py">.name</span><span class="p">,</span> <span class="n">car</span><span class="py">.price</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>

    <span class="k">let</span> <span class="n">demo_car</span> <span class="o">=</span> <span class="n">Car</span> <span class="p">{</span>
        <span class="n">name</span><span class="p">:</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"Ferrari"</span><span class="p">),</span>
        <span class="n">price</span><span class="p">:</span> <span class="mi">10000</span><span class="p">,</span>
    <span class="p">};</span>

    <span class="nf">print_car</span><span class="p">(</span><span class="n">demo_car</span><span class="p">);</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Name {}, price {}"</span><span class="p">,</span> <span class="n">demo_car</span><span class="py">.name</span><span class="p">,</span> <span class="n">demo_car</span><span class="py">.price</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>as expected, a compile error occurred. The error encountered is due to the <code class="language-plaintext highlighter-rouge">demo_car</code> variable being moved when it’s passed to the <code class="language-plaintext highlighter-rouge">print_car</code> function. After the move, I am trying to use <code class="language-plaintext highlighter-rouge">demo_car</code> again in the <code class="language-plaintext highlighter-rouge">println!</code> macro, which is not allowed because ownership has already been transferred.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">~</span> <span class="n">cargo</span> <span class="n">run</span>
   <span class="n">Compiling</span> <span class="n">greeting</span> <span class="n">v0</span><span class="p">.</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span> <span class="p">(</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">david</span><span class="o">/</span><span class="n">code</span><span class="o">/</span><span class="n">rust</span><span class="o">/</span><span class="n">first_proj</span><span class="o">/</span><span class="n">greeting</span><span class="p">)</span>
<span class="n">error</span><span class="p">[</span><span class="n">E0382</span><span class="p">]</span><span class="o">:</span> <span class="n">borrow</span> <span class="n">of</span> <span class="n">moved</span> <span class="n">value</span><span class="o">:</span> <span class="err">`</span><span class="n">demo_car</span><span class="err">`</span>
  <span class="o">--&gt;</span> <span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">17</span><span class="o">:</span><span class="mi">50</span>
   <span class="o">|</span>
<span class="mi">11</span> <span class="o">|</span>     <span class="n">let</span> <span class="n">demo_car</span> <span class="o">=</span> <span class="n">Car</span> <span class="p">{</span>
   <span class="o">|</span>         <span class="o">--------</span> <span class="n">move</span> <span class="n">occurs</span> <span class="n">because</span> <span class="err">`</span><span class="n">demo_car</span><span class="err">`</span> <span class="n">has</span> <span class="n">type</span> <span class="err">`</span><span class="n">Car</span><span class="err">`</span><span class="p">,</span> <span class="n">which</span> <span class="n">does</span> <span class="n">not</span> <span class="n">implement</span> <span class="n">the</span> <span class="err">`</span><span class="n">Copy</span><span class="err">`</span> <span class="n">trait</span>
<span class="p">...</span>
<span class="mi">16</span> <span class="o">|</span>     <span class="n">print_car</span><span class="p">(</span><span class="n">demo_car</span><span class="p">);</span>
   <span class="o">|</span>               <span class="o">--------</span> <span class="n">value</span> <span class="n">moved</span> <span class="n">here</span>
<span class="mi">17</span> <span class="o">|</span>     <span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">"Name {}, price {}"</span><span class="p">,</span> <span class="n">demo_car</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">demo_car</span><span class="p">.</span><span class="n">price</span><span class="p">);</span>
   <span class="o">|</span>                                                  <span class="o">^^^^^^^^^^^^^^</span> <span class="n">value</span> <span class="n">borrowed</span> <span class="n">here</span> <span class="n">after</span> <span class="n">move</span>
   <span class="o">|</span>
<span class="nl">note:</span> <span class="n">consider</span> <span class="n">changing</span> <span class="n">this</span> <span class="n">parameter</span> <span class="n">type</span> <span class="n">in</span> <span class="n">function</span> <span class="err">`</span><span class="n">print_car</span><span class="err">`</span> <span class="n">to</span> <span class="n">borrow</span> <span class="n">instead</span> <span class="k">if</span> <span class="n">owning</span> <span class="n">the</span> <span class="n">value</span> <span class="n">isn</span><span class="err">'</span><span class="n">t</span> <span class="n">necessary</span>
  <span class="o">--&gt;</span> <span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">5</span><span class="o">:</span><span class="mi">19</span>
   <span class="o">|</span>
<span class="mi">5</span>  <span class="o">|</span> <span class="n">fn</span> <span class="n">print_car</span><span class="p">(</span><span class="n">car</span><span class="o">:</span> <span class="n">Car</span><span class="p">)</span>
   <span class="o">|</span>    <span class="o">---------</span>      <span class="o">^^^</span> <span class="n">this</span> <span class="n">parameter</span> <span class="n">takes</span> <span class="n">ownership</span> <span class="n">of</span> <span class="n">the</span> <span class="n">value</span>
   <span class="o">|</span>    <span class="o">|</span>
   <span class="o">|</span>    <span class="n">in</span> <span class="n">this</span> <span class="n">function</span>
</code></pre></div></div>

<p>To fix this, we can either clone the <code class="language-plaintext highlighter-rouge">demo_car</code> before passing it to <code class="language-plaintext highlighter-rouge">print_car</code>, or we can change the <code class="language-plaintext highlighter-rouge">print_car</code> function to accept a reference to Car rather than taking ownership of it. Here’s the modified code using the second approach:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">#[derive(Clone)]</span>
<span class="k">struct</span> <span class="n">Car</span> <span class="p">{</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="n">price</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span>
<span class="p">}</span>
<span class="k">fn</span> <span class="nf">print_car</span><span class="p">(</span><span class="n">car</span><span class="p">:</span> <span class="n">Car</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Name {}, price {}"</span><span class="p">,</span> <span class="n">car</span><span class="py">.name</span><span class="p">,</span> <span class="n">car</span><span class="py">.price</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>

    <span class="k">let</span> <span class="n">demo_car</span> <span class="o">=</span> <span class="n">Car</span> <span class="p">{</span>
        <span class="n">name</span><span class="p">:</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"Ferrari"</span><span class="p">),</span>
        <span class="n">price</span><span class="p">:</span> <span class="mi">10000</span><span class="p">,</span>
    <span class="p">};</span>

    <span class="nf">print_car</span><span class="p">(</span><span class="n">demo_car</span><span class="nf">.clone</span><span class="p">());</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Name {}, price {}"</span><span class="p">,</span> <span class="n">demo_car</span><span class="py">.name</span><span class="p">,</span> <span class="n">demo_car</span><span class="py">.price</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Output</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">~</span> <span class="n">cargo</span> <span class="n">run</span>
    <span class="n">Finished</span> <span class="n">dev</span> <span class="p">[</span><span class="n">unoptimized</span> <span class="o">+</span> <span class="n">debuginfo</span><span class="p">]</span> <span class="n">target</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="n">in</span> <span class="mi">0</span><span class="p">.</span><span class="mo">05</span><span class="n">s</span>
     <span class="n">Running</span> <span class="err">`</span><span class="n">target</span><span class="o">/</span><span class="n">debug</span><span class="o">/</span><span class="n">greeting</span><span class="err">`</span>
<span class="n">Name</span> <span class="n">Ferrari</span><span class="p">,</span> <span class="n">price</span> <span class="mi">10000</span>
<span class="n">Name</span> <span class="n">Ferrari</span><span class="p">,</span> <span class="n">price</span> <span class="mi">10000</span>
</code></pre></div></div>

<p>Above we clone <code class="language-plaintext highlighter-rouge">demo_car</code> before passing it to the <code class="language-plaintext highlighter-rouge">print_car</code> function.</p>

<p>In this version:</p>

<ul>
  <li>
    <p>We’ve added <code class="language-plaintext highlighter-rouge">#[derive(Clone)]</code> to the Car struct definition to automatically derive the Clone trait for Car, allowing us to call the clone method on instances of Car.</p>
  </li>
  <li>
    <p>When calling <code class="language-plaintext highlighter-rouge">print_car</code>, we pass a cloned copy of <code class="language-plaintext highlighter-rouge">demo_car</code> using <code class="language-plaintext highlighter-rouge">demo_car.clone()</code>. This creates a new copy of <code class="language-plaintext highlighter-rouge">demo_car</code>, and ownership of the copy is passed to the <code class="language-plaintext highlighter-rouge">print_car</code> function, allowing us to retain ownership of the original <code class="language-plaintext highlighter-rouge">demo_car</code>.</p>
  </li>
  <li>
    <p>After calling <code class="language-plaintext highlighter-rouge">print_car</code>, we can still use <code class="language-plaintext highlighter-rouge">demo_car</code> as it has not been moved.</p>
  </li>
</ul>

<p>Below is another approach</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Car</span> <span class="p">{</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="n">price</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span>
<span class="p">}</span>
<span class="k">fn</span> <span class="nf">print_car</span><span class="p">(</span><span class="n">car</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">Car</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Name {}, price {}"</span><span class="p">,</span> <span class="n">car</span><span class="py">.name</span><span class="p">,</span> <span class="n">car</span><span class="py">.price</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>

    <span class="k">let</span> <span class="n">demo_car</span> <span class="o">=</span> <span class="n">Car</span> <span class="p">{</span>
        <span class="n">name</span><span class="p">:</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"Ferrari"</span><span class="p">),</span>
        <span class="n">price</span><span class="p">:</span> <span class="mi">10000</span><span class="p">,</span>
    <span class="p">};</span>

    <span class="nf">print_car</span><span class="p">(</span><span class="o">&amp;</span><span class="n">demo_car</span><span class="p">);</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Name {}, price {}"</span><span class="p">,</span> <span class="n">demo_car</span><span class="py">.name</span><span class="p">,</span> <span class="n">demo_car</span><span class="py">.price</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Output</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">~</span> <span class="n">cargo</span> <span class="n">run</span>
   <span class="n">Compiling</span> <span class="n">greeting</span> <span class="n">v0</span><span class="p">.</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span> <span class="p">(</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">david</span><span class="o">/</span><span class="n">code</span><span class="o">/</span><span class="n">rust</span><span class="o">/</span><span class="n">first_proj</span><span class="o">/</span><span class="n">greeting</span><span class="p">)</span>
    <span class="n">Finished</span> <span class="n">dev</span> <span class="p">[</span><span class="n">unoptimized</span> <span class="o">+</span> <span class="n">debuginfo</span><span class="p">]</span> <span class="n">target</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="n">in</span> <span class="mi">0</span><span class="p">.</span><span class="mi">35</span><span class="n">s</span>
     <span class="n">Running</span> <span class="err">`</span><span class="n">target</span><span class="o">/</span><span class="n">debug</span><span class="o">/</span><span class="n">greeting</span><span class="err">`</span>
<span class="n">Name</span> <span class="n">Ferrari</span><span class="p">,</span> <span class="n">price</span> <span class="mi">10000</span>
<span class="n">Name</span> <span class="n">Ferrari</span><span class="p">,</span> <span class="n">price</span> <span class="mi">10000</span>
</code></pre></div></div>

<p>In this version:</p>

<ul>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">print_car</code> function now accepts a reference to a Car struct using <code class="language-plaintext highlighter-rouge">&amp;Car</code> as the parameter type.</p>
  </li>
  <li>
    <p>Inside <code class="language-plaintext highlighter-rouge">print_car</code>, we use car.name and car.price to access the fields of the Car struct via the reference.</p>
  </li>
  <li>
    <p>When calling <code class="language-plaintext highlighter-rouge">print_car</code>, we pass a reference to <code class="language-plaintext highlighter-rouge">demo_car</code> using <code class="language-plaintext highlighter-rouge">&amp;demo_car</code>, which allows us to borrow demo_car without transferring ownership.</p>
  </li>
  <li>
    <p>After calling <code class="language-plaintext highlighter-rouge">print_car</code>, we can still use <code class="language-plaintext highlighter-rouge">demo_car</code> as it has not been moved.</p>
  </li>
</ul>]]></content><author><name>david.dong</name></author><category term="Rust" /><category term="Rust" /><summary type="html"><![CDATA[Learning the concept of ownership.]]></summary></entry><entry><title type="html">Rust startup - environment setup</title><link href="http://localhost:4000/rust/2024/02/10/Rust-startup.html" rel="alternate" type="text/html" title="Rust startup - environment setup" /><published>2024-02-10T17:24:55+08:00</published><updated>2024-02-10T17:24:55+08:00</updated><id>http://localhost:4000/rust/2024/02/10/Rust-startup</id><content type="html" xml:base="http://localhost:4000/rust/2024/02/10/Rust-startup.html"><![CDATA[<p>Rust is hot, I’ve heard a lot of people talking about the Rust language, and it’s powered me enough to learn more about it!   <!--more--></p>

<p>This is the first note to document the process of setting up the development environment, mainly choosing to develop under Linux.</p>

<h2 id="environments">Environments</h2>

<ul>
  <li>OS - ubuntu 16.04</li>
  <li>C Compiler - x86_64-unknown-linux-gnu</li>
  <li>IDE - VS Code</li>
</ul>

<h2 id="setup">Setup</h2>

<h3 id="rust-compile-environment-and-related-tools-installation">Rust Compile environment and related tools installation</h3>

<p>The rust development environment consists of rustup (toolchain management tool), cargo (package manager and build system) and rustc (compiler).</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">export</span> <span class="n">RUSTUP_DIST_SERVER</span><span class="o">=</span><span class="n">https</span><span class="o">:</span><span class="c1">//mirrors.ustc.edu.cn/rust-static</span>
<span class="err">$</span> <span class="n">export</span> <span class="n">RUSTUP_UPDATE_ROOT</span><span class="o">=</span><span class="n">https</span><span class="o">:</span><span class="c1">//mirrors.ustc.edu.cn/rust-static/rustup</span>
<span class="err">$</span> <span class="n">sudo</span> <span class="n">curl</span> <span class="n">https</span><span class="o">:</span><span class="c1">//sh.rustup.rs -sSf | sh</span>
</code></pre></div></div>

<p>choose option 1</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&amp;</span> <span class="n">david</span> <span class="err">@</span> <span class="n">david</span><span class="o">-</span><span class="n">VirtualBox</span> <span class="n">in</span> <span class="o">~</span> <span class="mi">0</span> <span class="p">[</span><span class="mi">15</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mi">08</span><span class="p">]</span>
<span class="o">~</span> <span class="n">curl</span> <span class="o">--</span><span class="n">proto</span> <span class="err">'</span><span class="o">=</span><span class="n">https</span><span class="err">'</span> <span class="o">--</span><span class="n">tlsv1</span><span class="p">.</span><span class="mi">2</span> <span class="o">-</span><span class="n">sSf</span> <span class="n">https</span><span class="o">:</span><span class="c1">//sh.rustup.rs | sh                                                                 0 [15:51:08]</span>
<span class="n">info</span><span class="o">:</span> <span class="n">downloading</span> <span class="n">installer</span>

<span class="n">Welcome</span> <span class="n">to</span> <span class="n">Rust</span><span class="o">!</span>

<span class="n">This</span> <span class="n">will</span> <span class="n">download</span> <span class="n">and</span> <span class="n">install</span> <span class="n">the</span> <span class="n">official</span> <span class="n">compiler</span> <span class="k">for</span> <span class="n">the</span> <span class="n">Rust</span>
<span class="n">programming</span> <span class="n">language</span><span class="p">,</span> <span class="n">and</span> <span class="n">its</span> <span class="n">package</span> <span class="n">manager</span><span class="p">,</span> <span class="n">Cargo</span><span class="p">.</span>

<span class="n">Rustup</span> <span class="n">metadata</span> <span class="n">and</span> <span class="n">toolchains</span> <span class="n">will</span> <span class="n">be</span> <span class="n">installed</span> <span class="n">into</span> <span class="n">the</span> <span class="n">Rustup</span>
<span class="n">home</span> <span class="n">directory</span><span class="p">,</span> <span class="n">located</span> <span class="n">at</span><span class="o">:</span>

  <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">david</span><span class="o">/</span><span class="p">.</span><span class="n">rustup</span>

<span class="n">This</span> <span class="n">can</span> <span class="n">be</span> <span class="n">modified</span> <span class="n">with</span> <span class="n">the</span> <span class="n">RUSTUP_HOME</span> <span class="n">environment</span> <span class="n">variable</span><span class="p">.</span>

<span class="n">The</span> <span class="n">Cargo</span> <span class="n">home</span> <span class="n">directory</span> <span class="n">is</span> <span class="n">located</span> <span class="n">at</span><span class="o">:</span>

  <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">david</span><span class="o">/</span><span class="p">.</span><span class="n">cargo</span>

<span class="n">This</span> <span class="n">can</span> <span class="n">be</span> <span class="n">modified</span> <span class="n">with</span> <span class="n">the</span> <span class="n">CARGO_HOME</span> <span class="n">environment</span> <span class="n">variable</span><span class="p">.</span>

<span class="n">The</span> <span class="n">cargo</span><span class="p">,</span> <span class="n">rustc</span><span class="p">,</span> <span class="n">rustup</span> <span class="n">and</span> <span class="n">other</span> <span class="n">commands</span> <span class="n">will</span> <span class="n">be</span> <span class="n">added</span> <span class="n">to</span>
<span class="n">Cargo</span><span class="err">'</span><span class="n">s</span> <span class="n">bin</span> <span class="n">directory</span><span class="p">,</span> <span class="n">located</span> <span class="n">at</span><span class="o">:</span>  <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">david</span><span class="o">/</span><span class="p">.</span><span class="n">cargo</span><span class="o">/</span><span class="n">bin</span> 
<span class="n">This</span> <span class="n">path</span> <span class="n">will</span> <span class="n">then</span> <span class="n">be</span> <span class="n">added</span> <span class="n">to</span> <span class="n">your</span> <span class="n">PATH</span> <span class="n">environment</span> <span class="n">variable</span> <span class="n">by</span> <span class="n">modifying</span> <span class="n">the</span> 
<span class="n">profile</span> <span class="n">files</span> <span class="n">located</span> <span class="n">at</span><span class="o">:</span>  <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">david</span><span class="o">/</span><span class="p">.</span><span class="n">profile</span>  <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">david</span><span class="o">/</span><span class="p">.</span><span class="n">bashrc</span> 
<span class="n">You</span> <span class="n">can</span> <span class="n">uninstall</span> <span class="n">at</span> <span class="n">any</span> <span class="n">time</span> <span class="n">with</span> <span class="n">rustup</span> <span class="n">self</span> <span class="n">uninstall</span> <span class="n">and</span> <span class="n">these</span> <span class="n">changes</span> <span class="n">will</span> 
<span class="n">be</span> <span class="n">reverted</span><span class="p">.</span> 
<span class="n">Current</span> <span class="n">installation</span> <span class="n">options</span><span class="o">:</span>   <span class="k">default</span> 
<span class="n">host</span> <span class="n">triple</span><span class="o">:</span> <span class="n">x86_64</span><span class="o">-</span><span class="n">unknown</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span>     <span class="k">default</span> 
<span class="n">toolchain</span><span class="o">:</span> <span class="n">stable</span> <span class="p">(</span><span class="k">default</span><span class="p">)</span>               
<span class="n">profile</span><span class="o">:</span> <span class="k">default</span>  
<span class="n">modify</span> <span class="n">PATH</span> <span class="n">variable</span><span class="o">:</span> <span class="n">yes</span>
<span class="mi">1</span><span class="p">)</span> <span class="n">Proceed</span> <span class="n">with</span> <span class="n">installation</span> <span class="p">(</span><span class="k">default</span><span class="p">)</span>
<span class="mi">2</span><span class="p">)</span> <span class="n">Customize</span> <span class="n">installation</span>
<span class="mi">3</span><span class="p">)</span> <span class="n">Cancel</span> <span class="n">installation</span>
<span class="o">&gt;</span><span class="mi">1</span>
<span class="n">info</span><span class="o">:</span> <span class="n">profile</span> <span class="n">set</span> <span class="n">to</span> <span class="err">'</span><span class="k">default</span><span class="err">'</span>
<span class="n">info</span><span class="o">:</span> <span class="k">default</span> 
<span class="n">host</span> <span class="n">triple</span> <span class="n">is</span> <span class="n">x86_64</span><span class="o">-</span><span class="n">unknown</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span>
<span class="n">info</span><span class="o">:</span> <span class="n">syncing</span> <span class="n">channel</span> <span class="n">updates</span> <span class="k">for</span> <span class="err">'</span><span class="n">stable</span><span class="o">-</span><span class="n">x86_64</span><span class="o">-</span><span class="n">unknown</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span><span class="err">'</span> <span class="mi">712</span><span class="p">.</span><span class="mi">1</span> <span class="n">KiB</span>
<span class="n">info</span><span class="o">:</span> <span class="n">latest</span> <span class="n">update</span> <span class="n">on</span> <span class="mi">2024</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">08</span><span class="p">,</span> 
<span class="n">rust</span> <span class="n">version</span> <span class="mi">1</span><span class="p">.</span><span class="mi">76</span><span class="p">.</span><span class="mi">0</span> <span class="p">(</span><span class="mo">07</span><span class="n">dca489a</span> <span class="mi">2024</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mo">04</span><span class="p">)</span>
<span class="n">info</span><span class="o">:</span> <span class="n">downloading</span> <span class="n">component</span> <span class="err">'</span><span class="n">cargo</span><span class="err">'</span> <span class="mi">8</span><span class="p">.</span><span class="mi">5</span> <span class="n">MiB</span> <span class="o">/</span> <span class="mi">8</span><span class="p">.</span><span class="mi">5</span> <span class="n">MiB</span> <span class="p">(</span><span class="mi">100</span> <span class="o">%</span><span class="p">)</span> <span class="mi">80</span><span class="p">.</span><span class="mi">0</span> <span class="n">KiB</span><span class="o">/</span><span class="n">s</span> <span class="n">in</span> <span class="mi">1</span><span class="n">m</span> <span class="mi">44</span><span class="n">s</span>
<span class="n">info</span><span class="o">:</span> <span class="n">downloading</span> <span class="n">component</span> <span class="err">'</span><span class="n">clippy</span><span class="err">'</span>  <span class="mi">2</span><span class="p">.</span><span class="mi">1</span> <span class="n">MiB</span> <span class="o">/</span>   <span class="mi">2</span><span class="p">.</span><span class="mi">1</span> <span class="n">MiB</span> <span class="p">(</span><span class="mi">100</span> <span class="o">%</span><span class="p">)</span>  <span class="mi">95</span><span class="p">.</span><span class="mi">0</span> <span class="n">KiB</span><span class="o">/</span><span class="n">s</span> <span class="n">in</span> <span class="mi">23</span><span class="n">s</span>
<span class="n">info</span><span class="o">:</span> <span class="n">downloading</span> <span class="n">component</span> <span class="err">'</span><span class="n">rust</span><span class="o">-</span><span class="n">docs</span><span class="err">'</span> <span class="mi">14</span><span class="p">.</span><span class="mi">7</span> <span class="n">MiB</span> <span class="o">/</span>  <span class="mi">14</span><span class="p">.</span><span class="mi">7</span> <span class="n">MiB</span> <span class="p">(</span><span class="mi">100</span> <span class="o">%</span><span class="p">)</span> <span class="mi">117</span><span class="p">.</span><span class="mi">4</span> <span class="n">KiB</span><span class="o">/</span><span class="n">s</span> <span class="n">in</span> <span class="mi">2</span><span class="n">m</span> 
<span class="n">info</span><span class="o">:</span> <span class="n">downloading</span> <span class="n">component</span> <span class="err">'</span><span class="n">rust</span><span class="o">-</span><span class="n">std</span><span class="err">'</span> <span class="mi">23</span><span class="p">.</span><span class="mi">9</span> <span class="n">MiB</span> <span class="o">/</span>  <span class="mi">23</span><span class="p">.</span><span class="mi">9</span> <span class="n">MiB</span> <span class="p">(</span><span class="mi">100</span> <span class="o">%</span><span class="p">)</span>  <span class="mi">98</span><span class="p">.</span><span class="mi">2</span> <span class="n">KiB</span><span class="o">/</span><span class="n">s</span> <span class="n">in</span> <span class="mi">4</span><span class="n">m</span> 
<span class="n">info</span><span class="o">:</span> <span class="n">downloading</span> <span class="n">component</span> <span class="err">'</span><span class="n">rustc</span><span class="err">'</span> <span class="mi">62</span><span class="p">.</span><span class="mi">3</span> <span class="n">MiB</span> <span class="o">/</span>  <span class="mi">62</span><span class="p">.</span><span class="mi">3</span> <span class="n">MiB</span> <span class="p">(</span><span class="mi">100</span> <span class="o">%</span><span class="p">)</span> <span class="mi">135</span><span class="p">.</span><span class="mi">4</span> <span class="n">KiB</span><span class="o">/</span><span class="n">s</span> <span class="n">in</span> <span class="mi">12</span><span class="n">m</span> 
<span class="n">info</span><span class="o">:</span> <span class="n">downloading</span> <span class="n">component</span> <span class="err">'</span><span class="n">rustfmt</span><span class="err">'</span>  <span class="mi">2</span><span class="p">.</span><span class="mi">3</span> <span class="n">MiB</span> <span class="o">/</span>   <span class="mi">2</span><span class="p">.</span><span class="mi">3</span> <span class="n">MiB</span> <span class="p">(</span><span class="mi">100</span> <span class="o">%</span><span class="p">)</span>  <span class="mi">86</span><span class="p">.</span><span class="mi">2</span> <span class="n">KiB</span><span class="o">/</span><span class="n">s</span> <span class="n">in</span> <span class="mi">30</span><span class="n">s</span> 
<span class="n">info</span><span class="o">:</span> <span class="n">installing</span> <span class="n">component</span> <span class="err">'</span><span class="n">cargo</span><span class="err">'</span>
<span class="n">info</span><span class="o">:</span> <span class="n">installing</span> <span class="n">component</span> <span class="err">'</span><span class="n">clippy</span><span class="err">'</span><span class="n">info</span><span class="o">:</span> <span class="n">installing</span> <span class="n">component</span> <span class="err">'</span><span class="n">rust</span><span class="o">-</span><span class="n">docs</span><span class="err">'</span> <span class="mi">14</span><span class="p">.</span><span class="mi">7</span> <span class="n">MiB</span> 
<span class="n">info</span><span class="o">:</span> <span class="n">installing</span> <span class="n">component</span> <span class="err">'</span><span class="n">rust</span><span class="o">-</span><span class="n">std</span><span class="err">'</span> <span class="mi">23</span><span class="p">.</span><span class="mi">9</span> <span class="n">MiB</span> <span class="o">/</span>  <span class="mi">23</span><span class="p">.</span><span class="mi">9</span> <span class="n">MiB</span> <span class="p">(</span><span class="mi">100</span> <span class="o">%</span><span class="p">)</span>  <span class="mi">13</span><span class="p">.</span><span class="mi">2</span> <span class="n">MiB</span><span class="o">/</span><span class="n">s</span> <span class="n">in</span> <span class="mi">1</span><span class="n">s</span>
<span class="n">info</span><span class="o">:</span> <span class="n">installing</span> <span class="n">component</span> <span class="err">'</span><span class="n">rustc</span><span class="err">'</span> <span class="mi">62</span><span class="p">.</span><span class="mi">3</span> <span class="n">MiB</span> <span class="o">/</span>  <span class="mi">62</span><span class="p">.</span><span class="mi">3</span> <span class="n">MiB</span> <span class="p">(</span><span class="mi">100</span> <span class="o">%</span><span class="p">)</span>  <span class="mi">14</span><span class="p">.</span><span class="mi">9</span> <span class="n">MiB</span><span class="o">/</span><span class="n">s</span> <span class="n">in</span>  <span class="mi">4</span><span class="n">s</span> 
<span class="n">info</span><span class="o">:</span> <span class="n">installing</span> <span class="n">component</span> <span class="err">'</span><span class="n">rustfmt</span><span class="err">'</span>
<span class="n">info</span><span class="o">:</span> <span class="k">default</span> <span class="n">toolchain</span> <span class="n">set</span> <span class="n">to</span> <span class="err">'</span><span class="n">stable</span><span class="o">-</span><span class="n">x86_64</span><span class="o">-</span><span class="n">unknown</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span><span class="err">'</span>  
<span class="n">stable</span><span class="o">-</span><span class="n">x86_64</span><span class="o">-</span><span class="n">unknown</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span> <span class="n">installed</span> 
<span class="o">-</span> <span class="n">rustc</span> <span class="mi">1</span><span class="p">.</span><span class="mi">76</span><span class="p">.</span><span class="mi">0</span> <span class="p">(</span><span class="mo">07</span><span class="n">dca489a</span> <span class="mi">2024</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mo">04</span><span class="p">)</span><span class="n">Rust</span> <span class="n">is</span> <span class="n">installed</span> <span class="n">now</span><span class="p">.</span> 
<span class="n">Great</span><span class="o">!</span><span class="n">To</span> <span class="n">get</span> <span class="n">started</span> <span class="n">you</span> <span class="n">may</span> <span class="n">need</span> <span class="n">to</span> <span class="n">restart</span> <span class="n">your</span> <span class="n">current</span> <span class="n">shell</span><span class="p">.</span>
<span class="n">This</span> <span class="n">would</span> <span class="n">reload</span> <span class="n">your</span> <span class="n">PATH</span> <span class="n">environment</span> <span class="n">variable</span> <span class="n">to</span> <span class="n">include</span> 
<span class="n">Cargo</span><span class="err">'</span><span class="n">s</span> <span class="n">bin</span> <span class="n">directory</span> <span class="p">(</span><span class="err">$</span><span class="n">HOME</span><span class="o">/</span><span class="p">.</span><span class="n">cargo</span><span class="o">/</span><span class="n">bin</span><span class="p">).</span>

<span class="n">To</span> <span class="n">configure</span> <span class="n">your</span> <span class="n">current</span> <span class="n">shell</span><span class="p">,</span> <span class="n">run</span><span class="o">:</span>
<span class="n">source</span> <span class="s">"$HOME/.cargo/env"</span>

<span class="o">&amp;</span> <span class="n">david</span> <span class="err">@</span> <span class="n">david</span><span class="o">-</span><span class="n">VirtualBox</span> <span class="n">in</span> <span class="o">~</span> <span class="mi">0</span> <span class="p">[</span><span class="mi">16</span><span class="o">:</span><span class="mi">20</span><span class="o">:</span><span class="mi">53</span><span class="p">]</span>
</code></pre></div></div>

<ul>
  <li>
    <p>The Rustup metadata and toolchain will be installed in the Rustup home directory located at /home/david/.rustup, which can be modified using the RUSTUP_HOME environment variable.</p>
  </li>
  <li>
    <p>Cargo’s home directory is located at /home/david/.cargo which can be modified via the CARGO_HOME environment variable.</p>
  </li>
  <li>
    <p>cargo, rustc, rustup and other commands will be added to cargo’s bin directory, which is located in /home/david/.cargo/bin</p>
  </li>
  <li>
    <p>add this path to the PATH environment variable /home/david/.profile or /home/david/. bashrc</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.cargo/bin:</span><span class="nv">$PATH</span><span class="s2">
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>I used fish shell, so need to add environment variable PATH in ~/.config/fish/config.fish</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set</span> <span class="nt">-x</span> PATH ~/.cargo/bin <span class="nv">$PATH</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Verify the installation</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">rustc</span> <span class="o">-</span><span class="n">V</span>
<span class="n">rustc</span> <span class="mi">1</span><span class="p">.</span><span class="mi">76</span><span class="p">.</span><span class="mi">0</span> <span class="p">(</span><span class="mo">07</span><span class="n">dca489a</span> <span class="mi">2024</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mo">04</span><span class="p">)</span>
<span class="o">&gt;</span> <span class="n">cargo</span> <span class="o">-</span><span class="n">V</span>
<span class="n">cargo</span> <span class="mi">1</span><span class="p">.</span><span class="mi">76</span><span class="p">.</span><span class="mi">0</span> <span class="p">(</span><span class="n">c84b36747</span> <span class="mi">2024</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">18</span><span class="p">)</span>
<span class="o">&gt;</span> <span class="n">rustup</span> <span class="o">-</span><span class="n">V</span>
<span class="n">rustup</span> <span class="mi">1</span><span class="p">.</span><span class="mi">26</span><span class="p">.</span><span class="mi">0</span> <span class="p">(</span><span class="mi">5</span><span class="n">af9b9484</span> <span class="mi">2023</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mo">05</span><span class="p">)</span>
<span class="n">info</span><span class="o">:</span> <span class="n">This</span> <span class="n">is</span> <span class="n">the</span> <span class="n">version</span> <span class="k">for</span> <span class="n">the</span> <span class="n">rustup</span> <span class="n">toolchain</span> <span class="n">manager</span><span class="p">,</span> <span class="n">not</span> <span class="n">the</span> <span class="n">rustc</span> <span class="n">compiler</span><span class="p">.</span>
<span class="n">info</span><span class="o">:</span> <span class="n">The</span> <span class="n">currently</span> <span class="n">active</span> <span class="err">`</span><span class="n">rustc</span><span class="err">`</span> <span class="n">version</span> <span class="n">is</span> <span class="err">`</span><span class="n">rustc</span> <span class="mi">1</span><span class="p">.</span><span class="mi">76</span><span class="p">.</span><span class="mi">0</span> <span class="p">(</span><span class="mo">07</span><span class="n">dca489a</span> <span class="mi">2024</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mo">04</span><span class="p">)</span><span class="err">`</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>The rust toolchain management tool rustup, the package manager cargo, and the compiler rustc are now installed!</p>

<ul>
  <li>
    <p>unstallation command</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rustup</span> <span class="n">self</span> <span class="n">uninstall</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="vscode-configuration-for-development-of-rust">Vscode configuration for development of Rust</h3>

<p>Install the following plug-ins</p>

<ul>
  <li>rust-analyzer</li>
  <li>CodeLLDB</li>
  <li>Code Runner</li>
</ul>

<h3 id="vscode-debugging-rust-code">Vscode debugging Rust code</h3>

<ul>
  <li>
    <p>Create a project directory like first_prj</p>
  </li>
  <li>
    <p>Go to first_prj</p>
  </li>
  <li>
    <p>Run <code class="language-plaintext highlighter-rouge">cargo new first_prj_name</code> in terminal, it will create project first_prj_name directory and src/main. rs</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Welcome</span> <span class="n">to</span> <span class="n">fish</span><span class="p">,</span> <span class="n">the</span> <span class="n">friendly</span> <span class="n">interactive</span> <span class="n">shell</span>
<span class="n">Type</span> <span class="n">help</span> <span class="k">for</span> <span class="n">instructions</span> <span class="n">on</span> <span class="n">how</span> <span class="n">to</span> <span class="n">use</span> <span class="n">fish</span>
  
<span class="o">&amp;</span> <span class="n">david</span> <span class="err">@</span> <span class="n">ubuntu</span> <span class="n">in</span> <span class="o">~/</span><span class="n">code</span><span class="o">/</span><span class="n">rust</span><span class="o">/</span><span class="n">first_proj</span> <span class="mi">0</span> <span class="p">[</span><span class="mi">19</span><span class="o">:</span><span class="mo">06</span><span class="o">:</span><span class="mi">14</span><span class="p">]</span>
<span class="o">~</span> <span class="n">cargo</span> <span class="n">new</span> <span class="n">greeting</span>
     <span class="n">Created</span> <span class="n">binary</span> <span class="p">(</span><span class="n">application</span><span class="p">)</span> <span class="err">`</span><span class="n">greeting</span><span class="err">`</span> <span class="n">package</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>cd . /first_prj_name</p>
  </li>
  <li>
    <p>run <code class="language-plaintext highlighter-rouge">cargo build</code> to compile the code</p>

    <div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&amp;</span> <span class="n">david</span> <span class="err">@</span> <span class="n">ubuntu</span> <span class="k">in</span> <span class="p">~/</span><span class="n">code</span><span class="p">/</span><span class="n">rust</span><span class="p">/</span><span class="n">first_proj</span><span class="p">/</span><span class="nf">greeting</span> <span class="p">(</span><span class="n">master</span> <span class="err">…</span><span class="m">3</span><span class="p">)</span> <span class="m">0</span> <span class="p">[</span><span class="m">19</span><span class="p">:</span><span class="m">07</span><span class="p">:</span><span class="m">15</span><span class="p">]</span>
<span class="p">~</span> <span class="n">cargo</span> <span class="n">build</span>
   <span class="n">Compiling</span> <span class="n">greeting</span> <span class="n">v0</span><span class="p">.</span><span class="m">1.0</span> <span class="p">(/</span><span class="n">home</span><span class="p">/</span><span class="n">david</span><span class="p">/</span><span class="n">code</span><span class="p">/</span><span class="n">rust</span><span class="p">/</span><span class="n">first_proj</span><span class="p">/</span><span class="n">greeting</span><span class="p">)</span>
    <span class="n">Finished</span> <span class="n">dev</span> <span class="p">[</span><span class="n">unoptimized</span> <span class="p">+</span> <span class="n">debuginfo</span><span class="p">]</span> <span class="nf">target</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="k">in</span> <span class="m">0.18</span><span class="n">s</span> <span class="m">0</span><span class="p">.</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>run <code class="language-plaintext highlighter-rouge">cargo run</code> to debug the code</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&amp;</span> <span class="n">david</span> <span class="err">@</span> <span class="n">ubuntu</span> <span class="n">in</span> <span class="o">~/</span><span class="n">code</span><span class="o">/</span><span class="n">rust</span><span class="o">/</span><span class="n">first_proj</span><span class="o">/</span><span class="n">greeting</span> <span class="p">(</span><span class="n">master</span> <span class="err">…</span><span class="mi">4</span><span class="p">)</span> <span class="mi">0</span> <span class="p">[</span><span class="mi">19</span><span class="o">:</span><span class="mo">07</span><span class="o">:</span><span class="mi">19</span><span class="p">]</span>
<span class="o">~</span> <span class="n">cargo</span> <span class="n">run</span>
    <span class="n">Finished</span> <span class="n">dev</span> <span class="p">[</span><span class="n">unoptimized</span> <span class="o">+</span> <span class="n">debuginfo</span><span class="p">]</span> <span class="n">target</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="n">in</span> <span class="mi">0</span><span class="p">.</span><span class="mo">00</span><span class="n">s</span>
     <span class="n">Running</span> <span class="err">`</span><span class="n">target</span><span class="o">/</span><span class="n">debug</span><span class="o">/</span><span class="n">greeting</span><span class="err">`</span>
<span class="n">Hello</span><span class="p">,</span> <span class="n">world</span><span class="o">!</span>
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name>david.dong</name></author><category term="Rust" /><category term="Rust" /><summary type="html"><![CDATA[To record how to set up environment of Rust development.]]></summary></entry><entry><title type="html">What it’s like to use ChatGPT</title><link href="http://localhost:4000/others/2023/02/04/Others-chatgpt.html" rel="alternate" type="text/html" title="What it’s like to use ChatGPT" /><published>2023-02-04T19:43:17+08:00</published><updated>2023-02-04T19:43:17+08:00</updated><id>http://localhost:4000/others/2023/02/04/Others-chatgpt</id><content type="html" xml:base="http://localhost:4000/others/2023/02/04/Others-chatgpt.html"><![CDATA[<p>ChatGPT is very hot recently, I also registered an account and experienced it myself. 😉 <!--more--></p>

<p>After registration, I login to ChatGPT’s URL and start testing.
I asked a few random professional questions to see how it answered. Here’s how it performed.</p>

<p>❓ <strong>Question:</strong> How to use DllImport in C#?</p>

<hr />

<p><strong>ChatGPT:</strong> To use <code class="language-plaintext highlighter-rouge">DllImport</code> in C#, you need to do the following:</p>

<ul>
  <li>Add a <code class="language-plaintext highlighter-rouge">using</code> statement for the <code class="language-plaintext highlighter-rouge">System.Runtime.InteropServices</code> namespace at the top of your code file:</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Runtime.InteropServices</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>
    <p>Use the <code class="language-plaintext highlighter-rouge">DllImport</code> attribute to specify the name of the DLL containing the unmanaged code you want to call and the name of the function within that DLL.</p>

    <p>For example:</p>
  </li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nf">DllImport</span><span class="p">(</span><span class="s">"mydll.dll"</span><span class="p">)]</span> 
<span class="k">private</span> <span class="k">static</span> <span class="k">extern</span> <span class="kt">int</span> <span class="nf">MyFunction</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>Call the unmanaged function from your C# code, just like you would call any other C# method:</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">result</span> <span class="p">=</span> <span class="nf">MyFunction</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">20</span><span class="p">);</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">DllImport</code> attribute allows you to call functions in unmanaged DLLs from your C# code. It is used to provide the necessary information for the CLR (Common Language Runtime) to be able to locate and call the function in the DLL at runtime.</p>

<p>❓ <strong>Question:</strong> Could you introduce the DllImport usage?</p>

<hr />

<p><strong>ChatGPT:</strong> Sure, the <code class="language-plaintext highlighter-rouge">DllImport</code> attribute is a way to call functions in unmanaged DLLs (Dynamic Link Libraries) From managed code, such as C#. <strong>Unmanaged DLLs are libraries written in languages such as C or C++, which do not run under the .NET runtime.</strong> Because of this, you cannot call functions in these DLLs directly From your C# code.</p>

<p>To use <code class="language-plaintext highlighter-rouge">DllImport</code>, you need to add a <code class="language-plaintext highlighter-rouge">using</code> statement for the <code class="language-plaintext highlighter-rouge">System.Runtime.InteropServices</code> namespace at the top of your code file. Then, use the <code class="language-plaintext highlighter-rouge">DllImport</code> attribute to specify the name of the DLL containing the unmanaged code you want to call and the name of the function within that DLL.</p>

<p>For example:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Runtime.InteropServices</span><span class="p">;</span>  
<span class="p">[</span><span class="nf">DllImport</span><span class="p">(</span><span class="s">"mydll.dll"</span><span class="p">)]</span> 
<span class="k">private</span> <span class="k">static</span> <span class="k">extern</span> <span class="kt">int</span> <span class="nf">MyFunction</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">);</span>
</code></pre></div></div>

<p>Once you’ve done this, you can call the unmanaged function From your C# code, just like you would call any other C# method:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">result</span> <span class="p">=</span> <span class="nf">MyFunction</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">20</span><span class="p">);</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">DllImport</code> attribute provides the necessary information for the CLR (Common Language Runtime) to be able to locate and call the function in the DLL at runtime. This allows you to use functions in unmanaged DLLs From your C# code.</p>

<p>Following its answer, I went on to ask…</p>

<p>❓ <strong>Question:</strong> What does that mean of the parameters <code class="language-plaintext highlighter-rouge">EntryPoint</code> and <code class="language-plaintext highlighter-rouge">CallingConvention</code> in the calling of DllImport with the C#?</p>

<hr />

<p><strong>ChatGPT:</strong> The <code class="language-plaintext highlighter-rouge">EntryPoint</code> parameter of the <code class="language-plaintext highlighter-rouge">DllImport</code> attribute is used to specify the name of the function within the DLL that you want to call.</p>

<p>For example:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nf">DllImport</span><span class="p">(</span><span class="s">"mydll.dll"</span><span class="p">,</span> <span class="n">EntryPoint</span> <span class="p">=</span> <span class="s">"MyFunction"</span><span class="p">)]</span> 
<span class="k">private</span> <span class="k">static</span> <span class="k">extern</span> 
<span class="kt">int</span> <span class="nf">MyFunction</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">);</span>
</code></pre></div></div>

<p>In this case, the <code class="language-plaintext highlighter-rouge">EntryPoint</code> is set to <code class="language-plaintext highlighter-rouge">"MyFunction"</code>, which is the name of the function in the DLL that will be called when <code class="language-plaintext highlighter-rouge">MyFunction</code> is called From C# code.</p>

<p>The <code class="language-plaintext highlighter-rouge">CallingConvention</code> parameter is used to specify the calling convention of the function being imported. The calling convention determines the order in which parameters are passed to the function, and how the return value is passed back to the caller. The possible values for the <code class="language-plaintext highlighter-rouge">CallingConvention</code> parameter are <code class="language-plaintext highlighter-rouge">StdCall</code>, <code class="language-plaintext highlighter-rouge">Cdecl</code>, and <code class="language-plaintext highlighter-rouge">Winapi</code> (the default).</p>

<p>For example:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nf">DllImport</span><span class="p">(</span><span class="s">"mydll.dll"</span><span class="p">,</span> <span class="n">EntryPoint</span> <span class="p">=</span> <span class="s">"MyFunction"</span><span class="p">,</span> <span class="n">CallingConvention</span> <span class="p">=</span> <span class="n">CallingConvention</span><span class="p">.</span><span class="n">StdCall</span><span class="p">)]</span> 
<span class="k">private</span> <span class="k">static</span> <span class="k">extern</span> <span class="kt">int</span> <span class="nf">MyFunction</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">);</span>
</code></pre></div></div>

<p>In this case, the <code class="language-plaintext highlighter-rouge">CallingConvention</code> is set to <code class="language-plaintext highlighter-rouge">CallingConvention.StdCall</code>, which specifies that the function uses the standard calling convention. The standard calling convention is the default for most functions in Windows DLLs, so you don’t usually need to specify it explicitly.</p>

<p>The <code class="language-plaintext highlighter-rouge">EntryPoint</code> and <code class="language-plaintext highlighter-rouge">CallingConvention</code> parameters are optional when using <code class="language-plaintext highlighter-rouge">DllImport</code>. If you omit them, the default values will be used. For the <code class="language-plaintext highlighter-rouge">EntryPoint</code> parameter, the default value is the name of the method in your C# code, and for the <code class="language-plaintext highlighter-rouge">CallingConvention</code> parameter, the default is <code class="language-plaintext highlighter-rouge">Winapi</code>. However, it’s a good idea to always specify both of these parameters explicitly to avoid any confusion or potential problems.</p>

<p>And the last question,</p>

<p>❓ <strong>Question:</strong> What is the <code class="language-plaintext highlighter-rouge">CallingConvention.Cdecl</code> and what is the difference with <code class="language-plaintext highlighter-rouge">CallingConvention.Cdecl</code> and <code class="language-plaintext highlighter-rouge">CallingConvention.StdCall</code>?</p>

<hr />

<p><strong>ChatGPT:</strong> The <code class="language-plaintext highlighter-rouge">CallingConvention.Cdecl</code> value specifies that the <strong>C calling convention</strong> is used for the function being imported. In the C calling convention, parameters are passed on the stack From right to left, and the caller is responsible for cleaning up the stack. This is the default calling convention for functions in C and C++.</p>

<p>The <code class="language-plaintext highlighter-rouge">CallingConvention.StdCall</code> value specifies that the <strong>standard calling convention</strong> is used for the function being imported. In the standard calling convention, parameters are also passed on the stack, but the callee (the function being called) is responsible for cleaning up the stack. This is the default calling convention for most functions in Windows DLLs.</p>

<p><strong>The main difference between these two calling conventions is who is responsible for cleaning up the stack after the function call</strong>. In the C calling convention, the caller is responsible for this, while in the standard calling convention, the callee is responsible. This means that if you use the C calling convention and forget to clean up the stack, you will get a stack overflow error. On the other hand, if you use the standard calling convention and forget to clean up the stack, the DLL will crash.</p>

<p>In general, it’s best to use the standard calling convention unless you have a specific reason to use the C calling convention. This is because the standard calling convention is more robust and less error-prone than the C calling convention.</p>

<p>Well done! So far it has performed very well, at least it has answered as precisely as I wanted.</p>

<p>To sum up my own experience, the first impression is “fast, accurate, efficient and powerful”. I feel comfortable using it and unlike traditional search engines, it summarizes and extracts the amount of information available on the internet and presents it to me in a very concise and easy to understand format, which can really improve productivity.</p>]]></content><author><name>david.dong</name></author><category term="Others" /><category term="ChatGPT" /><summary type="html"><![CDATA[To record my first experience with ChatGPT.]]></summary></entry><entry><title type="html">About gerrit.createChangeId</title><link href="http://localhost:4000/git/2022/08/11/gerrit.createchangeid.html" rel="alternate" type="text/html" title="About gerrit.createChangeId" /><published>2022-08-11T22:10:09+08:00</published><updated>2022-08-11T22:10:09+08:00</updated><id>http://localhost:4000/git/2022/08/11/gerrit.createchangeid</id><content type="html" xml:base="http://localhost:4000/git/2022/08/11/gerrit.createchangeid.html"><![CDATA[<p><code class="language-plaintext highlighter-rouge">git config --bool --get gerrit.createChangeId</code> is a command used in the Git version control system to retrieve the value of the configuration option <code class="language-plaintext highlighter-rouge">gerrit.createChangeId</code>. <!--more-->This option determines whether a change-id should be created for each commit message when pushing to a Gerrit server.</p>

<p>The <code class="language-plaintext highlighter-rouge">--bool</code> flag specifies that the value being retrieved is a <em>boolean</em>, which means it can be either <code class="language-plaintext highlighter-rouge">true</code> or <code class="language-plaintext highlighter-rouge">false</code>. The <code class="language-plaintext highlighter-rouge">--get</code> flag specifies that the command should retrieve the value of the specified configuration option.</p>

<p>The <code class="language-plaintext highlighter-rouge">gerrit.createChangeId</code> option is used in conjunction with Gerrit, which is a web-based code review tool that integrates with Git. When this option is set to <code class="language-plaintext highlighter-rouge">true</code>, a change-id will be automatically added to the commit message when pushing to a Gerrit server. <strong>This change-id is used by Gerrit to identify a particular change and to track its progress through the code review process.</strong></p>

<p>To set the value of the <code class="language-plaintext highlighter-rouge">gerrit.createChangeId</code> option, you can use the command <code class="language-plaintext highlighter-rouge">git config --bool --add gerrit.createChangeId true</code> or <code class="language-plaintext highlighter-rouge">git config --bool --add gerrit.createChangeId false</code>, depending on the desired value.</p>]]></content><author><name>david.dong</name></author><category term="Git" /><category term="Git" /><summary type="html"><![CDATA[Git Hook 的学习分享.]]></summary></entry><entry><title type="html">Keep old change-id when do git commit</title><link href="http://localhost:4000/git/2022/07/22/git-change-id.html" rel="alternate" type="text/html" title="Keep old change-id when do git commit" /><published>2022-07-22T22:45:56+08:00</published><updated>2022-07-22T22:45:56+08:00</updated><id>http://localhost:4000/git/2022/07/22/git-change-id</id><content type="html" xml:base="http://localhost:4000/git/2022/07/22/git-change-id.html"><![CDATA[<p>When I use <code class="language-plaintext highlighter-rouge">git commit --amend</code> command, it will generate a new change-id. But I want to use the previous change-id and don’t want to generate a new one. How should I keep the old change-id and keep only one change-id?<!--more--></p>

<p>When you use <code class="language-plaintext highlighter-rouge">git commit --amend</code>, it creates a new commit that replaces the previous commit. <strong>This new commit will have a new commit hash and will be treated as a completely separate commit by Git</strong>, even though it may contain the same changes as the previous commit.</p>

<p>To keep the old change-id and have only one change-id, you can use the <code class="language-plaintext highlighter-rouge">git commit --amend --no-edit</code> command. This will allow you to amend the previous commit without creating a new commit or changing the commit message. The change-id will remain the same and you will only have one change-id for that commit.</p>

<p>It’s important to note that using <code class="language-plaintext highlighter-rouge">git commit --amend</code> can be a powerful tool, but it should be used with caution, as it can cause confusion if used improperly. If you have already pushed the commit to a remote repository, you should be careful when using <code class="language-plaintext highlighter-rouge">git commit --amend</code>, as it can cause problems when working with other collaborators. It’s generally a good idea to communicate with your team before using <code class="language-plaintext highlighter-rouge">git commit --amend</code> on a commit that has been pushed to a remote repository.</p>]]></content><author><name>david.dong</name></author><category term="Git" /><category term="Git" /><summary type="html"><![CDATA[Learn how to keep old change-id when git commit.]]></summary></entry><entry><title type="html">Git hook 配置与使用</title><link href="http://localhost:4000/git/2022/07/01/Git-hooks.html" rel="alternate" type="text/html" title="Git hook 配置与使用" /><published>2022-07-01T22:10:09+08:00</published><updated>2022-07-01T22:10:09+08:00</updated><id>http://localhost:4000/git/2022/07/01/Git-hooks</id><content type="html" xml:base="http://localhost:4000/git/2022/07/01/Git-hooks.html"><![CDATA[<p>Hook 就是在执行某个事件之前或之后进行一些其他额外的操作。在 Git 中也有许多的事件（commit、push 等等），每个事件也是对应了有不同的钩子的（如 commit 前，commit 后），那么我们就可以在这些钩子这里配置一些自己需要执行的操作来实现各种各样的需求。<!--more--></p>

<h2 id="git-hooks-介绍">Git Hooks 介绍</h2>

<p><em>Git Hooks</em> 的实现其实非常简单，就是就 <code class="language-plaintext highlighter-rouge">.git/hooks</code> 文件下，保存了一些 shell 脚本，然后在对应的钩子中执行这些脚本就行了。比如下图中，这是一个还没有配置 <em>Git Hooks</em> 的仓库，默认会有很多 <code class="language-plaintext highlighter-rouge">.sample</code> 结尾的文件，这些都是示例文件。</p>

<p><img src="https://cdn.jsdelivr.net/gh/gangdong/gangdong.github.io@dev/assets/image/git-hooks-01.png" alt="git-hook-01" class="center-image" /></p>

<p>我们打开 <code class="language-plaintext highlighter-rouge">pre-commit.sample</code> 文件看一下其中的内容，大致意思是说这是一个示例，做了一些格式方面的检测，这个脚本默认是不生效的，如果要生效，把文件名改为 <code class="language-plaintext highlighter-rouge">pre-commit</code> 即可。</p>

<p><img src="https://pic3.zhimg.com/v2-fa71d169ef288ed2ca7bd660930036f6_r.jpg" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">pre-commit</code> 这个钩子是在 <code class="language-plaintext highlighter-rouge">git commit</code> 命令执行之前触发。</p>

<p>Git 支持的所有钩子见下表（<em>加粗的为常用钩子</em>）：</p>

<p><img src="https://pic4.zhimg.com/v2-161c0a131454d4b24f16a9a3125d947f_r.jpg" alt="" /></p>

<p>PS：完整钩子说明，请参考 <a href="https://git-scm.com/docs/githooks">@官网链接</a></p>

<h2 id="husky-配置">Husky 配置</h2>

<p>从上面的介绍中，我们知道 Git Hook 保存在 <code class="language-plaintext highlighter-rouge">.git</code> 文件夹中。不知你有没有发现这会有一个问题？可能细心的同学已经知道了，Git 是一个多人协作工具，那按理说 Git 仓库中的所有文件都应该被跟踪并且上传至远程仓库的。但是有个例外，<code class="language-plaintext highlighter-rouge">.git </code> 文件夹不会，这就导致一个问题，我们在本地配置好 <em>Git Hook</em> 后，怎么分享给其他小伙伴儿呢？copy 吗？那未免太 low 了，都用 Git 了，还 copy，也太不优雅了。这时候，就轮到 <a href="https://github.com/typicode/husky">Husky</a> 出场了。</p>

<p><em>Husky</em> 是一个让配置 Git 钩子变得更简单的工具（题外话：Husky 是哈士奇的意思，我猜可能是作者养了条二哈）</p>

<p>下面这些流行的项目都在使用 <em>Husky</em>，可见它确实是一个非常好用的工具：</p>

<ul>
  <li><a href="https://github.com/webpack/webpack">webpack</a></li>
  <li><a href="https://github.com/babel/babel">babel</a></li>
  <li><a href="https://github.com/facebookincubator/create-react-app">create-react-app</a></li>
  <li>……</li>
</ul>

<h2 id="no-verify-的使用">–no-verify 的使用</h2>

<p><code class="language-plaintext highlighter-rouge">git commit --amend --no-verify</code> 命令是一条 Git 命令，它允许你修改最近的提交信息或内容，而不触发 <code class="language-plaintext highlighter-rouge">pre-commit</code> 和 <code class="language-plaintext highlighter-rouge">commit-msg</code> 钩子。<code class="language-plaintext highlighter-rouge">git commit --amend</code> 命令与此类似，但它会在钩子存在的情况下运行这些钩子。这两个命令都会用包含你的修改的新提交来替换之前的提交。</p>]]></content><author><name>david.dong</name></author><category term="Git" /><category term="Git" /><summary type="html"><![CDATA[Git Hook 的学习分享.]]></summary></entry><entry><title type="html">Windows 消息处理机制</title><link href="http://localhost:4000/windows/2022/06/18/Windows-message-handler.html" rel="alternate" type="text/html" title="Windows 消息处理机制" /><published>2022-06-18T19:43:52+08:00</published><updated>2022-06-18T19:43:52+08:00</updated><id>http://localhost:4000/windows/2022/06/18/Windows-message-handler</id><content type="html" xml:base="http://localhost:4000/windows/2022/06/18/Windows-message-handler.html"><![CDATA[<p>Windows32 程序是由消息事件驱动的。一个消息，是系统定义的一个 32 位的值，它唯一的定义了一个事件，向 Windows 发出一个通知，告诉应用程序某个事情发生了。</p>

<h2 id="消息队列">消息队列</h2>

<ul>
  <li>Windows 有两种消息队列，<strong>系统消息队列</strong>和<strong>应用程序消息队列</strong>。消息在队列中先入先出。</li>
  <li><strong>系统消息队列</strong>-由系统维护的消息队列，处理系统事件。例如鼠标、键盘等。</li>
  <li><strong>程序消息队列</strong>-属于每一个应用程序（线程）的消息队列。由应用程序（线程）维护。系统都会为每个 GUI 线程创建一个消息队列，这个消息队列用来存放该应用程序所创建的窗口的消息。</li>
  <li>应用程序则通过一个消息循环（消息泵）不断的从消息队列中读取消息，并做出响应。</li>
</ul>

<h2 id="流程如下">流程如下</h2>

<ul>
  <li>
    <p>当鼠标、键盘事件被触发后，相应的鼠标或键盘驱动程序就会把这些事件转换成相应的消息，然后发送到<strong>系统消息队列</strong>，由 Windows 系统去进行处理。</p>
  </li>
  <li>
    <p>Windows 从系统消息队列中取出一个消息，根据 MSG 消息结构（消息结构体中的窗口句柄 <code class="language-plaintext highlighter-rouge">hwnd</code>）确定消息是要被送往那个窗口，然后把取出的消息送往<strong>创建窗口的线程的相应队列</strong>（Windows 会为每个 GUI 线程创建一个消息队列，该线程中的所有窗体共享这个消息队列）。</p>
  </li>
  <li>
    <p>线程看到自己的消息队列中有消息，就从队列中取出来，通过操作系统发送到合适的窗口过程去处理。</p>
  </li>
  <li>
    <p>线程的消息队列的读取和处理消息的部分如下</p>

    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span><span class="p">(</span><span class="nf">GetMessage</span><span class="p">(&amp;</span><span class="n">msg</span><span class="p">,</span><span class="n">NULL</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">)){</span>
<span class="err">    </span><span class="k">if</span><span class="p">(!</span><span class="nf">TranslateAccelerator</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">hWnd</span><span class="p">,</span><span class="n">hAccelTable</span><span class="p">,&amp;</span><span class="n">msg</span><span class="p">))</span>
  <span class="err">    </span><span class="p">{</span>
      <span class="err">    </span><span class="nf">TranslateMessage</span><span class="p">(&amp;</span><span class="n">msg</span><span class="p">);</span>
      <span class="err">    </span><span class="nf">DispatchMessage</span><span class="p">(&amp;</span><span class="n">msg</span><span class="p">);</span>
  <span class="err">    </span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>

    <p>说明：首先，<code class="language-plaintext highlighter-rouge">GetMessage</code> 从进程的主线程的消息队列中获取一个消息并将它复制到 MSG 结构，如果队列中没有消息，则 <code class="language-plaintext highlighter-rouge">GetMessage</code> 函数将等待一个消息的到来以后才返回。</p>
  </li>
</ul>

<blockquote>
  <p>注意:
<code class="language-plaintext highlighter-rouge">GetMessage</code> 会一直等待，直到有接收到消息才返回。</p>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">DispatchMessage</code> 函数将把此消息发送给该消息指定的窗口中已设定的回调函数。即用户自定义的处理函数 <code class="language-plaintext highlighter-rouge">WndProc</code>。</p>

<ul>
  <li>
    <p>用户自定义的消息处理函数 <code class="language-plaintext highlighter-rouge">WndProc</code> 处理消息。处理消息代码如下。</p>

    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">LRESULT</span> <span class="n">CALLBACK</span> <span class="nf">WndProc</span><span class="p">(</span><span class="n">HWND</span> <span class="n">hWnd</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">message</span><span class="p">,</span> <span class="n">WPARAM</span> <span class="n">wParam</span><span class="p">,</span> <span class="n">LPARAM</span> <span class="n">lParam</span><span class="p">){</span>
      <span class="k">switch</span> <span class="p">(</span><span class="n">message</span><span class="p">)</span> 
      <span class="p">{</span>
            <span class="k">case</span> <span class="n">WM_COMMAND</span><span class="p">:</span>
              <span class="p">...</span>
            <span class="k">case</span> <span class="k">case</span> <span class="n">IDM_EXIT</span><span class="p">:</span>
              <span class="p">...</span>
              <span class="p">...</span>
            <span class="k">default</span><span class="p">:</span>
              <span class="k">return</span> <span class="nf">DefWindowProc</span><span class="p">(</span><span class="n">hWnd</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">wParam</span><span class="p">,</span> <span class="n">lParam</span><span class="p">);</span>
      <span class="p">}</span>
  <span class="k">return</span> <span class="m">0</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>说明：
用户自定义的窗体处理函数也即 <code class="language-plaintext highlighter-rouge">"窗口过程"</code>, 窗口过程是一个用于处理所有发送到这个窗口的消息的函数。任何一个窗口类都有一个窗口过程。<strong>同一个类的窗口使用同样的窗口过程来响应消息</strong>。系统发送消息给窗口过程将消息数据作为参数传递给他，消息到来之后，按照消息类型排序进行处理，其中的参数则用来区分不同的消息，窗口过程使用参数产生合适行为。</p>

<p><img src="https://cdn.jsdelivr.net/gh/gangdong/gangdong.github.io@dev/assets/image/windows-message-handling-01.png" alt="windows-message-handling" class="center-image" /></p>

<h2 id="消息结构体">消息结构体</h2>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">typedef</span> <span class="k">struct</span> <span class="nc">tagMsg</span> <span class="p">{</span>
    <span class="n">HWND</span> <span class="n">hwnd</span><span class="p">;</span> <span class="c1">//接受该消息的窗口句柄</span>
    <span class="n">UINT</span> <span class="n">message</span><span class="p">;</span> <span class="c1">//消息常量标识符，也就是我们通常所说的消息号</span>
    <span class="n">WPARAM</span> <span class="n">wParam</span><span class="p">;</span> <span class="c1">//32位消息的特定附加信息，确切含义依赖于消息值</span>
    <span class="n">LPARAM</span> <span class="n">lParam</span><span class="p">;</span> <span class="c1">//32位消息的特定附加信息，确切含义依赖于消息值</span>
    <span class="n">DWORD</span> <span class="n">time</span><span class="p">;</span> <span class="c1">//消息创建时的时间</span>
    <span class="n">POINT</span> <span class="n">pt</span><span class="p">;</span> <span class="c1">//消息创建时的鼠标/光标在屏幕坐标系中的位置</span>
<span class="p">}</span><span class="n">MSG</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="发送消息函数-sendmessage--和-postmessage--的区别">发送消息函数 SendMessage () 和 PostMessage () 的区别</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SendMessage</code> 这个函数主要是向一个或多个窗口发送一条消息，<strong>这个函数是异步函数。一直等到消息被处理之后才会返回</strong>。</li>
  <li><code class="language-plaintext highlighter-rouge">PostMessage</code> 该函数把一条消息放置到创建 hWnd 窗口的线程的消息队列中，<strong>该函数不等消息被处理就马上将控制返回</strong>。</li>
  <li>被<strong>发送</strong>的消息（<code class="language-plaintext highlighter-rouge">SendMessage</code>）会被立即处理，处理完毕后函数才会返回；被<strong>寄送</strong>的 (<code class="language-plaintext highlighter-rouge">PostMessage</code>) 消息不会被立即处理，他被放到一个先进先出的队列中，一直等到应用程序空线的时候才会被处理，不过函数放置消息后立即返回。</li>
</ul>

<h2 id="读取消息函数-getmessage--和-waitmessage--peekmessage-">读取消息函数 GetMessage () 和 WaitMessage (), PeekMessage ()</h2>

<ul>
  <li>都是读取消息的函数</li>
  <li><code class="language-plaintext highlighter-rouge">GetMessage</code> 会一直等到接收到消息才返回。</li>
  <li><code class="language-plaintext highlighter-rouge">PeekMessage</code> 函数不会等到有消息放入队列时才返回.</li>
  <li><code class="language-plaintext highlighter-rouge">WaitMessage</code> 当一个应用程序无事可做时，该函数就将控制权交给另外的应用程序，同时将该应用程序挂起，直到一个新的消息被放入应用程序的队列之中才返回。</li>
</ul>]]></content><author><name>david.dong</name></author><category term="Windows" /><category term="Windows" /><summary type="html"><![CDATA[记录 Windows 消息处理原理的学习内容]]></summary></entry><entry><title type="html">浅谈 Java 线程同步技术</title><link href="http://localhost:4000/java/2022/04/22/Java-ThreadSynchronization.html" rel="alternate" type="text/html" title="浅谈 Java 线程同步技术" /><published>2022-04-22T22:44:19+08:00</published><updated>2022-04-22T22:44:19+08:00</updated><id>http://localhost:4000/java/2022/04/22/Java-ThreadSynchronization</id><content type="html" xml:base="http://localhost:4000/java/2022/04/22/Java-ThreadSynchronization.html"><![CDATA[<p>Java 里实现线程间的同步有多种方法，比如使用 <code class="language-plaintext highlighter-rouge">synchronized</code> 关键字，<code class="language-plaintext highlighter-rouge">wait</code> 和 <code class="language-plaintext highlighter-rouge">notify</code>，<code class="language-plaintext highlighter-rouge">volatile</code> 变量，重入锁，局部变量，阻塞队列或者原子类型变量等。</p>

<h2 id="synchronized">synchronized</h2>

<p>使用 <code class="language-plaintext highlighter-rouge">synchronized</code> 关键字：这是最常用的一种方法，它可以修饰代码块或者方法，使得同一时刻只有一个线程能够访问被修饰的代码。例如 ：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SynchronizedDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//创建两个线程</span>
        <span class="nc">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                <span class="c1">//调用同步方法</span>
                <span class="n">syncMethod</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">},</span> <span class="s">"t1"</span><span class="o">);</span>

        <span class="nc">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                <span class="c1">//调用同步方法</span>
                <span class="n">syncMethod</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">},</span> <span class="s">"t2"</span><span class="o">);</span>

        <span class="c1">//启动两个线程</span>
        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">//定义一个同步方法</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">syncMethod</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"开始执行"</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"结束执行"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="wait-和-notify">wait 和 notify</h2>

<p>使用 <code class="language-plaintext highlighter-rouge">wait</code> 和 <code class="language-plaintext highlighter-rouge">notify</code> ：这是一种基于对象监视器的机制，它可以让一个线程等待另一个线程的通知，从而实现协作。例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WaitNotifyDemo</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Object</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">();</span> <span class="c1">//定义一个锁对象</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">//创建两个线程</span>
        <span class="nc">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                <span class="kd">synchronized</span> <span class="o">(</span><span class="n">lock</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//获取锁对象</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t1开始执行"</span><span class="o">);</span>
                    <span class="k">try</span> <span class="o">{</span>
                        <span class="n">lock</span><span class="o">.</span><span class="na">wait</span><span class="o">();</span> <span class="c1">//释放锁并等待通知</span>
                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                    <span class="o">}</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t1收到通知"</span><span class="o">);</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t1结束执行"</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">},</span> <span class="s">"t1"</span><span class="o">);</span>

        <span class="nc">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                <span class="kd">synchronized</span> <span class="o">(</span><span class="n">lock</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//获取锁对象</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t2开始执行"</span><span class="o">);</span>
                    <span class="k">try</span> <span class="o">{</span>
                        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span> <span class="c1">//模拟耗时操作</span>
                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                    <span class="o">}</span>
                    <span class="n">lock</span><span class="o">.</span><span class="na">notify</span><span class="o">();</span> <span class="c1">//唤醒等待的线程</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t2发送通知"</span><span class="o">);</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t2结束执行"</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">},</span> <span class="s">"t2"</span><span class="o">);</span>

        <span class="c1">//启动两个线程</span>
        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>

    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<h2 id="volatile">volatile</h2>

<p><code class="language-plaintext highlighter-rouge">volatile</code> 变量是一种特殊的变量，它可以保证变量在多个线程之间的可见性，也就是说当一个线程修改了 <code class="language-plaintext highlighter-rouge">volatile</code> 变量的值后，其他线程能够立即看到最新的值。<code class="language-plaintext highlighter-rouge"> volatile </code> 变量还可以防止编译器或者运行时对其进行重排序，从而保证其操作的顺序性。</p>

<p><code class="language-plaintext highlighter-rouge">volatile</code> 变量适合用于以下几种场景：</p>

<p>状态标志：例如一个开关变量，用来控制其他线程的执行流程。
单例模式：例如双重检查锁定（double-checked locking）模式，用来保证对象的唯一性和及时性。
原子操作：例如 long 或 double 类型的赋值操作，在 Java 中不是原子性的，但是定义为 volatile 后可以保证原子性。</p>

<p>假设有一个 <code class="language-plaintext highlighter-rouge">volatile</code> 变量叫做 stop，它用来控制一个线程的执行流程。当 stop 为 false 时，线程继续运行；当 stop 为 true 时，线程停止运行。代码如下:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VolatileExample</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">stop</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                <span class="k">while</span> <span class="o">(!</span><span class="n">stop</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 如果stop为true，跳出循环</span>
                    <span class="n">i</span><span class="o">++;</span>
                <span class="o">}</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"i="</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span> <span class="c1">// 主线程休眠1秒</span>
        <span class="n">stop</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// 修改stop的值为true</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个例子中，如果不使用 <code class="language-plaintext highlighter-rouge">volatile</code> 修饰 <code class="language-plaintext highlighter-rouge">stop</code> 变量，那么可能会出现这样的情况：主线程修改了 stop 的值为 true，但是子线程没有看到最新的值，仍然认为 stop 是 false，导致子线程无法停止。这是因为每个线程都有自己的工作内存（缓存），它们会从主内存中复制共享变量的值，并在工作内存中操作共享变量。如果不使用 <code class="language-plaintext highlighter-rouge">volatile</code> 修饰共享变量，那么就不能保证其他线程能够及时看到最新的值。</p>

<p>但是如果使用了 <code class="language-plaintext highlighter-rouge">volatile</code> 修饰 <code class="language-plaintext highlighter-rouge">stop</code> 变量，那么就可以保证当主线程修改了 stop 的值后，其他线程能够立即看到最新的值，并根据最新的值来执行相应的操作。这是因为 volatile 关键字可以强制让编译器每次都从主内存中读取共享变量的值，并且禁止对其进行重排序。</p>

<h2 id="重入锁">重入锁</h2>

<p>重入锁是一种可以被同一个线程多次获取的锁，也就是说当一个线程已经持有了锁，它可以再次请求获取锁而不会被阻塞。重入锁可以避免死锁的发生，也可以提高代码的可读性和可维护性。</p>

<p>Java 中提供了一个重入锁的实现类：<code class="language-plaintext highlighter-rouge">ReentrantLock</code>，它实现了 <code class="language-plaintext highlighter-rouge">Lock</code> 接口，提供了加锁和释放锁的方法。使用 <code class="language-plaintext highlighter-rouge">ReentrantLock</code> 时，需要在 try-finally 块中手动调用 <code class="language-plaintext highlighter-rouge">lock ()</code> 和 <code class="language-plaintext highlighter-rouge">unlock ()</code> 方法来保证锁的正确获取和释放。</p>

<p>举个例子吧，假设有一个银行账户类 Account，它有一个余额属性 balance 和一个转账方法 transfer ()，为了保证转账操作的原子性和线程安全性，我们可以使用 <code class="language-plaintext highlighter-rouge">ReentrantLock</code> 来对 <code class="language-plaintext highlighter-rouge">transfer ()</code> 方法进行同步控制。
代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.concurrent.locks.ReentrantLock</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Account</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">balance</span><span class="o">;</span> <span class="c1">// 余额</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ReentrantLock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ReentrantLock</span><span class="o">();</span> <span class="c1">// 重入锁</span>

    <span class="kd">public</span> <span class="nf">Account</span><span class="o">(</span><span class="kt">int</span> <span class="n">balance</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">balance</span> <span class="o">=</span> <span class="n">balance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">transfer</span><span class="o">(</span><span class="nc">Account</span> <span class="n">target</span><span class="o">,</span> <span class="kt">int</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span> <span class="c1">// 获取锁</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 如果余额足够</span>
                <span class="n">balance</span> <span class="o">-=</span> <span class="n">amount</span><span class="o">;</span> <span class="c1">// 扣除转出金额</span>
                <span class="n">target</span><span class="o">.</span><span class="na">balance</span> <span class="o">+=</span> <span class="n">amount</span><span class="o">;</span> <span class="c1">// 增加转入金额</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span> <span class="c1">// 释放锁</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个例子中，如果不使用 <code class="language-plaintext highlighter-rouge">ReentrantLock</code> 来对 <code class="language-plaintext highlighter-rouge">transfer ()</code> 方法进行同步控制，那么可能会出现这样的情况：当两个线程同时对同一个账户对象执行转账操作时，可能会导致余额不正确或者数据不一致的问题。这是因为转账操作涉及到多个共享变量（balance 和 target.balance）的读写操作，并且这些操作不是原子性的。</p>

<p>但是如果使用了 <code class="language-plaintext highlighter-rouge">ReentrantLock</code> 来对 <code class="language-plaintext highlighter-rouge">transfer ()</code> 方法进行同步控制，那么就可以保证当一个线程执行转账操作时，其他线程不能同时执行该操作，并且该操作能够完整地执行而不会被打断。这是因为 <code class="language-plaintext highlighter-rouge">ReentrantLock</code> 可以实现互斥访问共享资源，并且保证操作的顺序性和原子性。</p>

<h2 id="原子类型变量">原子类型变量</h2>

<p>Java 里的原子类型变量是一种可以在多线程环境下保证原子性操作的变量类，它们使用了 CAS（Compare And Swap）算法来实现无锁的并发控制。</p>

<p>原子类型变量有以下几种分类：</p>

<ul>
  <li>标量原子变量类：支持对 int，long 和 boolean 等基本数据类型的操作，例如 AtomicInteger，AtomicLong 和 AtomicBoolean。</li>
  <li>原子数组类：支持对 int，long 和引用类型的数组元素进行原子性更新，例如 AtomicIntegerArray，AtomicLongArray 和 AtomicReferenceArray。</li>
  <li>原子字段更新程序类：支持使用反射以原子方式更新类的易失性字段，例如 AtomicLongFieldUpdater，AtomicIntegerFieldUpdater 和 AtomicReferenceFieldUpdater。</li>
  <li>原子复合变量类：支持对多个变量进行原子性更新，例如 AtomicStampedReference 和 AtomicMarkableReference。
下面是一个使用 AtomicInteger 的例子：</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.concurrent.atomic.AtomicInteger</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AtomicCounter</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">AtomicInteger</span> <span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AtomicInteger</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">.</span><span class="na">incrementAndGet</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">decrement</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">.</span><span class="na">decrementAndGet</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>david.dong</name></author><category term="Java" /><category term="Java" /><summary type="html"><![CDATA[本文内容对 Java 中用到的线程间同步的技术做了些讨论和总结。]]></summary></entry><entry><title type="html">浅谈 Java 线程同步技术</title><link href="http://localhost:4000/java/2022/04/22/Java-threadSynchronization.html" rel="alternate" type="text/html" title="浅谈 Java 线程同步技术" /><published>2022-04-22T22:44:19+08:00</published><updated>2022-04-22T22:44:19+08:00</updated><id>http://localhost:4000/java/2022/04/22/Java-threadSynchronization</id><content type="html" xml:base="http://localhost:4000/java/2022/04/22/Java-threadSynchronization.html"><![CDATA[<p>Java 里实现线程间的同步有多种方法，比如使用 <code class="language-plaintext highlighter-rouge">synchronized</code> 关键字，<code class="language-plaintext highlighter-rouge">wait</code> 和 <code class="language-plaintext highlighter-rouge">notify</code>，<code class="language-plaintext highlighter-rouge">volatile</code> 变量，重入锁，局部变量，阻塞队列或者原子类型变量等。</p>

<h2 id="synchronized">synchronized</h2>

<p>使用 <code class="language-plaintext highlighter-rouge">synchronized</code> 关键字：这是最常用的一种方法，它可以修饰代码块或者方法，使得同一时刻只有一个线程能够访问被修饰的代码。例如 ：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SynchronizedDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//创建两个线程</span>
        <span class="nc">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                <span class="c1">//调用同步方法</span>
                <span class="n">syncMethod</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">},</span> <span class="s">"t1"</span><span class="o">);</span>

        <span class="nc">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                <span class="c1">//调用同步方法</span>
                <span class="n">syncMethod</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">},</span> <span class="s">"t2"</span><span class="o">);</span>

        <span class="c1">//启动两个线程</span>
        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">//定义一个同步方法</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">syncMethod</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"开始执行"</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"结束执行"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="wait-和-notify">wait 和 notify</h2>

<p>使用 <code class="language-plaintext highlighter-rouge">wait</code> 和 <code class="language-plaintext highlighter-rouge">notify</code> ：这是一种基于对象监视器的机制，它可以让一个线程等待另一个线程的通知，从而实现协作。例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WaitNotifyDemo</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Object</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">();</span> <span class="c1">//定义一个锁对象</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">//创建两个线程</span>
        <span class="nc">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                <span class="kd">synchronized</span> <span class="o">(</span><span class="n">lock</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//获取锁对象</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t1开始执行"</span><span class="o">);</span>
                    <span class="k">try</span> <span class="o">{</span>
                        <span class="n">lock</span><span class="o">.</span><span class="na">wait</span><span class="o">();</span> <span class="c1">//释放锁并等待通知</span>
                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                    <span class="o">}</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t1收到通知"</span><span class="o">);</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t1结束执行"</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">},</span> <span class="s">"t1"</span><span class="o">);</span>

        <span class="nc">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                <span class="kd">synchronized</span> <span class="o">(</span><span class="n">lock</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//获取锁对象</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t2开始执行"</span><span class="o">);</span>
                    <span class="k">try</span> <span class="o">{</span>
                        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span> <span class="c1">//模拟耗时操作</span>
                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                    <span class="o">}</span>
                    <span class="n">lock</span><span class="o">.</span><span class="na">notify</span><span class="o">();</span> <span class="c1">//唤醒等待的线程</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t2发送通知"</span><span class="o">);</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t2结束执行"</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">},</span> <span class="s">"t2"</span><span class="o">);</span>

        <span class="c1">//启动两个线程</span>
        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>

    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<h2 id="volatile">volatile</h2>

<p><code class="language-plaintext highlighter-rouge">volatile</code> 变量是一种特殊的变量，它可以保证变量在多个线程之间的可见性，也就是说当一个线程修改了 <code class="language-plaintext highlighter-rouge">volatile</code> 变量的值后，其他线程能够立即看到最新的值。<code class="language-plaintext highlighter-rouge"> volatile </code> 变量还可以防止编译器或者运行时对其进行重排序，从而保证其操作的顺序性。</p>

<p><code class="language-plaintext highlighter-rouge">volatile</code> 变量适合用于以下几种场景：</p>

<p>状态标志：例如一个开关变量，用来控制其他线程的执行流程。
单例模式：例如双重检查锁定（double-checked locking）模式，用来保证对象的唯一性和及时性。
原子操作：例如 long 或 double 类型的赋值操作，在 Java 中不是原子性的，但是定义为 volatile 后可以保证原子性。</p>

<p>假设有一个 <code class="language-plaintext highlighter-rouge">volatile</code> 变量叫做 stop，它用来控制一个线程的执行流程。当 stop 为 false 时，线程继续运行；当 stop 为 true 时，线程停止运行。代码如下:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VolatileExample</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">stop</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                <span class="k">while</span> <span class="o">(!</span><span class="n">stop</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 如果stop为true，跳出循环</span>
                    <span class="n">i</span><span class="o">++;</span>
                <span class="o">}</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"i="</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span> <span class="c1">// 主线程休眠1秒</span>
        <span class="n">stop</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// 修改stop的值为true</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个例子中，如果不使用 <code class="language-plaintext highlighter-rouge">volatile</code> 修饰 <code class="language-plaintext highlighter-rouge">stop</code> 变量，那么可能会出现这样的情况：主线程修改了 stop 的值为 true，但是子线程没有看到最新的值，仍然认为 stop 是 false，导致子线程无法停止。这是因为每个线程都有自己的工作内存（缓存），它们会从主内存中复制共享变量的值，并在工作内存中操作共享变量。如果不使用 <code class="language-plaintext highlighter-rouge">volatile</code> 修饰共享变量，那么就不能保证其他线程能够及时看到最新的值。</p>

<p>但是如果使用了 <code class="language-plaintext highlighter-rouge">volatile</code> 修饰 <code class="language-plaintext highlighter-rouge">stop</code> 变量，那么就可以保证当主线程修改了 stop 的值后，其他线程能够立即看到最新的值，并根据最新的值来执行相应的操作。这是因为 volatile 关键字可以强制让编译器每次都从主内存中读取共享变量的值，并且禁止对其进行重排序。</p>

<h2 id="重入锁">重入锁</h2>

<p>重入锁是一种可以被同一个线程多次获取的锁，也就是说当一个线程已经持有了锁，它可以再次请求获取锁而不会被阻塞。重入锁可以避免死锁的发生，也可以提高代码的可读性和可维护性。</p>

<p>Java 中提供了一个重入锁的实现类：<code class="language-plaintext highlighter-rouge">ReentrantLock</code>，它实现了 <code class="language-plaintext highlighter-rouge">Lock</code> 接口，提供了加锁和释放锁的方法。使用 <code class="language-plaintext highlighter-rouge">ReentrantLock</code> 时，需要在 try-finally 块中手动调用 <code class="language-plaintext highlighter-rouge">lock ()</code> 和 <code class="language-plaintext highlighter-rouge">unlock ()</code> 方法来保证锁的正确获取和释放。</p>

<p>举个例子吧，假设有一个银行账户类 Account，它有一个余额属性 balance 和一个转账方法 transfer ()，为了保证转账操作的原子性和线程安全性，我们可以使用 <code class="language-plaintext highlighter-rouge">ReentrantLock</code> 来对 <code class="language-plaintext highlighter-rouge">transfer ()</code> 方法进行同步控制。
代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.concurrent.locks.ReentrantLock</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Account</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">balance</span><span class="o">;</span> <span class="c1">// 余额</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ReentrantLock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ReentrantLock</span><span class="o">();</span> <span class="c1">// 重入锁</span>

    <span class="kd">public</span> <span class="nf">Account</span><span class="o">(</span><span class="kt">int</span> <span class="n">balance</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">balance</span> <span class="o">=</span> <span class="n">balance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">transfer</span><span class="o">(</span><span class="nc">Account</span> <span class="n">target</span><span class="o">,</span> <span class="kt">int</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span> <span class="c1">// 获取锁</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 如果余额足够</span>
                <span class="n">balance</span> <span class="o">-=</span> <span class="n">amount</span><span class="o">;</span> <span class="c1">// 扣除转出金额</span>
                <span class="n">target</span><span class="o">.</span><span class="na">balance</span> <span class="o">+=</span> <span class="n">amount</span><span class="o">;</span> <span class="c1">// 增加转入金额</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span> <span class="c1">// 释放锁</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个例子中，如果不使用 <code class="language-plaintext highlighter-rouge">ReentrantLock</code> 来对 <code class="language-plaintext highlighter-rouge">transfer ()</code> 方法进行同步控制，那么可能会出现这样的情况：当两个线程同时对同一个账户对象执行转账操作时，可能会导致余额不正确或者数据不一致的问题。这是因为转账操作涉及到多个共享变量（balance 和 target.balance）的读写操作，并且这些操作不是原子性的。</p>

<p>但是如果使用了 <code class="language-plaintext highlighter-rouge">ReentrantLock</code> 来对 <code class="language-plaintext highlighter-rouge">transfer ()</code> 方法进行同步控制，那么就可以保证当一个线程执行转账操作时，其他线程不能同时执行该操作，并且该操作能够完整地执行而不会被打断。这是因为 <code class="language-plaintext highlighter-rouge">ReentrantLock</code> 可以实现互斥访问共享资源，并且保证操作的顺序性和原子性。</p>

<h2 id="原子类型变量">原子类型变量</h2>

<p>Java 里的原子类型变量是一种可以在多线程环境下保证原子性操作的变量类，它们使用了 CAS（Compare And Swap）算法来实现无锁的并发控制。</p>

<p>原子类型变量有以下几种分类：</p>

<ul>
  <li>标量原子变量类：支持对 int，long 和 boolean 等基本数据类型的操作，例如 AtomicInteger，AtomicLong 和 AtomicBoolean。</li>
  <li>原子数组类：支持对 int，long 和引用类型的数组元素进行原子性更新，例如 AtomicIntegerArray，AtomicLongArray 和 AtomicReferenceArray。</li>
  <li>原子字段更新程序类：支持使用反射以原子方式更新类的易失性字段，例如 AtomicLongFieldUpdater，AtomicIntegerFieldUpdater 和 AtomicReferenceFieldUpdater。</li>
  <li>原子复合变量类：支持对多个变量进行原子性更新，例如 AtomicStampedReference 和 AtomicMarkableReference。
下面是一个使用 AtomicInteger 的例子：</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.concurrent.atomic.AtomicInteger</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AtomicCounter</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">AtomicInteger</span> <span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AtomicInteger</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">.</span><span class="na">incrementAndGet</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">decrement</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">.</span><span class="na">decrementAndGet</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>david.dong</name></author><category term="Java" /><category term="Java" /><summary type="html"><![CDATA[本文内容对 Java 中用到的线程间同步的技术做了些讨论和总结。]]></summary></entry></feed>